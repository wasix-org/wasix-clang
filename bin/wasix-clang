#!/usr/bin/env bash
set -euo pipefail
shopt -s extglob

WASIX_CLANG_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
WASIX_CLANG_REPO_ROOT=$(dirname $WASIX_CLANG_DIR)
DEFAULT_SYSROOT=$WASIX_CLANG_REPO_ROOT/wasix-sysroot
DEFAULT_LLVM=$WASIX_CLANG_REPO_ROOT/wasix-llvm
DEFAULT_BINARYEN=$WASIX_CLANG_REPO_ROOT/binaryen
if ! test -d "${DEFAULT_SYSROOT}" || ! test -d "${DEFAULT_LLVM}" || ! test -d "${DEFAULT_BINARYEN}" ; then
    echo "You are running wasix-clang for the first time. This will take a moment, as we need to fetch dependencies." >&2
    bash ${WASIX_CLANG_REPO_ROOT}/setup.sh
    echo "Done fetching dependencies. Please try again to actually use them." >&2
    exit 1
fi

### Options
# Force libraries to be resolved to `.a` files instead of `.so` files.
WASIX_FORCE_STATIC_DEPENDENCIES="${WASIX_FORCE_STATIC_DEPENDENCIES:=false}"
# Set the wasix sysroot to use.
WASIX_SYSROOT="${WASIX_SYSROOT:=$DEFAULT_SYSROOT}"
# Set the root of the llvm/clang tools to use.
WASIX_LLVM="${WASIX_LLVM:=$DEFAULT_LLVM}"
# Set the root of the binaryen tools to use.
WASIX_BINARYEN="${WASIX_BINARYEN:=$DEFAULT_BINARYEN}"

if ! test -d "${WASIX_SYSROOT}" ; then
    echo "WASIX_SYSROOT ($WASIX_SYSROOT) does not point to a valid sysroot. Please make sure it exists." >&2
    exit 1
fi
if ! test -d "${WASIX_LLVM}" ; then
    echo "WASIX_LLVM ($WASIX_LLVM) does not point to a valid llvm install. Please make sure it exists." >&2
    exit 1
fi
if ! test -d "${WASIX_BINARYEN}" ; then
    echo "WASIX_BINARYEN ($WASIX_BINARYEN) does not point to a valid binaryen install. Please make sure it exists." >&2
    exit 1
fi

# Detect if we are clang or clang++
if [[ "$0" =~ "++" ]]; then
    NATIVE_COMPILER="${WASIX_LLVM}/bin/clang++"
else
    NATIVE_COMPILER="${WASIX_LLVM}/bin/clang"
fi
# Prefer vendored LLVM and binaryen path over system path
export PATH="${WASIX_LLVM}/bin:${WASIX_BINARYEN}/bin:$PATH"

PASSED_ARGS=(
    "$@"
)

# Analyze the arguments
# Check if we are also linking
run_linker=true
# We are building a shared library
shared_library=false
for arg in "${PASSED_ARGS[@]}"; do
    case "$arg" in
        -c|-S|-E)
            run_linker=false
            ;;
        --version|-print*)
            run_linker=false
            ;;
        -shared|--shared)
            shared_library=true
            ;;
    esac
done

COMPILER_ARGS=(
    --target=wasm32-wasi
    --sysroot="${WASIX_SYSROOT}"
    
    -iwithsysroot "/include/c++/v1"
    -isystem "${WASIX_LLVM}/lib/clang/21/include"
    -iwithsysroot "/usr/local/include"
    -iwithsysroot "/include"
    -iwithsysroot "/usr/include"

    -matomics -mbulk-memory -mmutable-globals
    -pthread
    -mthread-model posix
    -ftls-model=global-dynamic
    -fno-trapping-math
    -D_WASI_EMULATED_MMAN -D_WASI_EMULATED_SIGNAL -D_WASI_EMULATED_PROCESS_CLOCKS
    -fvisibility=default
    -fwasm-exceptions
    -fPIC
    # Disable some new warnings
    # TODO: Test if these can be reenabled
    -Wno-int-conversion -Wno-implicit-function-declaration -Wno-default-const-init-var-unsafe
    # Enable sjlj. This is unused when we are only linking, but figuring out if we are only linking is hard
    --start-no-unused-arguments -mllvm --wasm-enable-sjlj --end-no-unused-arguments
    # We are getting some weird overflows without this flag. 
    # pointer + ((unsigned long)-1) = 0xFFFFFFFFFFFFFFFF
    -fno-strict-overflow
)
COMMON_LINKER_ARGS=(

    -L${WASIX_SYSROOT}/lib
    -L${WASIX_SYSROOT}/lib/wasm32-wasi
    -L${WASIX_SYSROOT}/usr/lib
    -L${WASIX_SYSROOT}/usr/lib/wasm32-wasi
    -L${WASIX_SYSROOT}/usr/local/lib
    -L${WASIX_SYSROOT}/usr/local/lib/wasm32-wasi

    # Enable PIC
    -Wl,--experimental-pic
    -Wl,--extra-features=atomics,--extra-features=bulk-memory,--extra-features=mutable-globals
    -Wl,--shared-memory
    -Wl,--export-if-defined=__wasm_apply_data_relocs
    -Wl,--export-if-defined=__cxa_thread_atexit_impl
    -Wl,--export=__wasm_call_ctors
    -Wl,-mllvm,--wasm-enable-sjlj
)
LIBRARY_LINKER_ARGS=(
    # No standard libraries, because the main executable already provides them
    --no-standard-libraries -nostdlib++ -Wl,--no-entry
    # Build a shared library
    --shared
    # Import all unresolved symbols
    -Wl,--unresolved-symbols=import-dynamic
    -Wl,-lclang_rt.builtins-wasm32
    ${WASIX_SYSROOT}/lib/wasm32-wasi/scrt1.o
)
EXECUTABLE_LINKER_ARGS=(
    -Wl,--import-memory
    -Wl,-pie
    -Wl,--export-all
    # Allow multiple definitions. This emulates the behaviour when linking a shared library where it is allowed to override libc functions
    # If there is a way to only allow multiple definitions for libc functions, please let me know
    -Wl,--allow-multiple-definition
    -Wl,--whole-archive,-lc,-lutil,-lresolv,-lrt,-lm,-lpthread,-lc++,-lc++abi,-lunwind,-lwasi-emulated-mman,-lwasi-emulated-getpid,-lcommon-tag-stubs,--no-whole-archive
)

UNSUPPORTED_LINKER_ARGS=(
    --end-group
    --start-group
    --as-needed
    --allow-shlib-undefined
    --enable-new-dtags
    "--version-script=*([^,])"
    "--version-script,*([^,])"
)

UNSUPPORTED_CC_ARGS=(
    # Remove explicit scrt1.o, because wasix-clang already added it
    "${WASIX_SYSROOT}/lib/wasm32-wasi/scrt1.o"
)

if [[ "${PASSED_ARGS[@]}" == *"-o conftest"* ]] ; then
    # Heuristically detect if we are running an autoconf test. Then disable the shlib signature check so it works. This is a hack, but it works for now.
    #
    # autoconfs AC_CHECK_LIB tests for functions in libraries but always uses a () => i32 signature.
    # See: https://www.gnu.org/software/autoconf/manual/autoconf-2.66/html_node/Libraries.html
    COMMON_LINKER_ARGS+=( -Wl,--no-shlib-sigcheck )
fi

FILTERED_PASSED_ARGS=( )
for arg in "${PASSED_ARGS[@]}"; do
    # Remove unsupported arguments
    for unsupported_cc_arg in "${UNSUPPORTED_CC_ARGS[@]}"; do
        if [[ "$arg" == "$unsupported_cc_arg" ]]; then
            continue 2
        fi
    done

    # Filter unsupported linker arguments
    if [[ "$arg" = "-Wl,"* ]]; then
        for unsupported_linker_arg in "${UNSUPPORTED_LINKER_ARGS[@]}"; do
            arg="${arg//,$unsupported_linker_arg/}"
        done
        [[ "$arg" == "-Wl" ]] && continue || true
    fi

    # Force dependencies to be resolved to static libraries if requested
    if "$WASIX_FORCE_STATIC_DEPENDENCIES" && [[ "$arg" == "-l"[^/:]* ]]; then
        basename="${arg/#-l/}"
        arg="-l:lib${basename}.a"
    fi

    # Add all other arguments to our filtered list
    FILTERED_PASSED_ARGS+=("$arg")
done

ARGS=()
ARGS+=("${COMPILER_ARGS[@]}")
if $run_linker; then
    ARGS+=("${COMMON_LINKER_ARGS[@]}")

    if $shared_library; then
        ARGS+=("${LIBRARY_LINKER_ARGS[@]}")
    else
        ARGS+=("${EXECUTABLE_LINKER_ARGS[@]}")
    fi
fi


ARGS+=("${FILTERED_PASSED_ARGS[@]}")


# exec ${NATIVE_COMPILER} "${ARGS[@]}"

# TODO: The below code path is only necessary, because we dont support legacy exceptions (yet?)
# TODO: Thsi is really error prone. We do NOT want to maintain a compiler wrapper that does more than just adding flags.
# We can probably just include the exception transformation pass in wasmer

if ! $run_linker; then
    # If we are not linking, we can just run the compiler directly
    exec ${NATIVE_COMPILER} "${ARGS[@]}"
fi

# If we are linking, we need to run wasm-opt after the compilation to use the new exception handling
output_file="a.out"
for ((i=0; i<${#ARGS[@]}; i++)); do
    if [ "${ARGS[$i]}" = "-o" ] && [ $((i+1)) -lt ${#ARGS[@]} ]; then
        output_file="${ARGS[$i+1]}"
        break
    elif [[ "${ARGS[$i]}" =~ ^-o(.+)$ ]]; then
        output_file="${BASH_REMATCH[1]}"
        break
    fi
done

${NATIVE_COMPILER} "${ARGS[@]}"

# Transform the old exception handling to the new one
${WASIX_BINARYEN}/bin/wasm-opt --experimental-new-eh "$output_file" -o "$output_file"